// Code generated by mockery v1.0.0
package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import model "github.com/perenecabuto/CatchCatch/server/model"
import service "github.com/perenecabuto/CatchCatch/server/service"

// PlayerLocationService is an autogenerated mock type for the PlayerLocationService type
type PlayerLocationService struct {
	mock.Mock
}

// All provides a mock function with given fields:
func (_m *PlayerLocationService) All() (model.PlayerList, error) {
	ret := _m.Called()

	var r0 model.PlayerList
	if rf, ok := ret.Get(0).(func() model.PlayerList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.PlayerList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ObservePlayerNearToCheckpoint provides a mock function with given fields: _a0, _a1
func (_m *PlayerLocationService) ObservePlayerNearToCheckpoint(_a0 context.Context, _a1 service.PlayerNearToFeatureCallback) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.PlayerNearToFeatureCallback) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ObservePlayerNearToFeature provides a mock function with given fields: _a0, _a1, _a2
func (_m *PlayerLocationService) ObservePlayerNearToFeature(_a0 context.Context, _a1 string, _a2 service.PlayerNearToFeatureCallback) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, service.PlayerNearToFeatureCallback) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ObservePlayersAround provides a mock function with given fields: _a0, _a1
func (_m *PlayerLocationService) ObservePlayersAround(_a0 context.Context, _a1 service.PlayersAroundCallback) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.PlayersAroundCallback) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ObservePlayersInsideGeofence provides a mock function with given fields: ctx, callback
func (_m *PlayerLocationService) ObservePlayersInsideGeofence(ctx context.Context, callback func(string, model.Player) error) error {
	ret := _m.Called(ctx, callback)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(string, model.Player) error) error); ok {
		r0 = rf(ctx, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Remove provides a mock function with given fields: p
func (_m *PlayerLocationService) Remove(p *model.Player) error {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Player) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Set provides a mock function with given fields: p
func (_m *PlayerLocationService) Set(p *model.Player) error {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Player) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
