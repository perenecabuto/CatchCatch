// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import model "github.com/perenecabuto/CatchCatch/server/model"

// GeoFeatureService is an autogenerated mock type for the GeoFeatureService type
type GeoFeatureService struct {
	mock.Mock
}

// Clear provides a mock function with given fields:
func (_m *GeoFeatureService) Clear() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FeaturesAroundPlayer provides a mock function with given fields: group, player
func (_m *GeoFeatureService) FeaturesAroundPlayer(group string, player model.Player) ([]*model.Feature, error) {
	ret := _m.Called(group, player)

	var r0 []*model.Feature
	if rf, ok := ret.Get(0).(func(string, model.Player) []*model.Feature); ok {
		r0 = rf(group, player)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Feature)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, model.Player) error); ok {
		r1 = rf(group, player)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeaturesByGroup provides a mock function with given fields: group
func (_m *GeoFeatureService) FeaturesByGroup(group string) ([]*model.Feature, error) {
	ret := _m.Called(group)

	var r0 []*model.Feature
	if rf, ok := ret.Get(0).(func(string) []*model.Feature); ok {
		r0 = rf(group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Feature)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetFeature provides a mock function with given fields: group, id, geojson
func (_m *GeoFeatureService) SetFeature(group string, id string, geojson string) error {
	ret := _m.Called(group, id, geojson)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(group, id, geojson)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
