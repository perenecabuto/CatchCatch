// Code generated by mockery v1.0.0
package repo_mocks

import geo "github.com/kellydunn/golang-geo"
import mock "github.com/stretchr/testify/mock"
import model "github.com/perenecabuto/CatchCatch/server/model"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Clear provides a mock function with given fields:
func (_m *Repository) Clear() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelFeatureExtraData provides a mock function with given fields: group, id
func (_m *Repository) DelFeatureExtraData(group string, id string) error {
	ret := _m.Called(group, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(group, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: group, id
func (_m *Repository) Exists(group string, id string) (bool, error) {
	ret := _m.Called(group, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(group, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(group, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeatureByID provides a mock function with given fields: group, id
func (_m *Repository) FeatureByID(group string, id string) (*model.Feature, error) {
	ret := _m.Called(group, id)

	var r0 *model.Feature
	if rf, ok := ret.Get(0).(func(string, string) *model.Feature); ok {
		r0 = rf(group, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Feature)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(group, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeatureExtraData provides a mock function with given fields: group, id
func (_m *Repository) FeatureExtraData(group string, id string) (string, error) {
	ret := _m.Called(group, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(group, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(group, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Features provides a mock function with given fields: group
func (_m *Repository) Features(group string) ([]*model.Feature, error) {
	ret := _m.Called(group)

	var r0 []*model.Feature
	if rf, ok := ret.Get(0).(func(string) []*model.Feature); ok {
		r0 = rf(group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Feature)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeaturesAround provides a mock function with given fields: group, point
func (_m *Repository) FeaturesAround(group string, point *geo.Point) ([]*model.Feature, error) {
	ret := _m.Called(group, point)

	var r0 []*model.Feature
	if rf, ok := ret.Get(0).(func(string, *geo.Point) []*model.Feature); ok {
		r0 = rf(group, point)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Feature)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *geo.Point) error); ok {
		r1 = rf(group, point)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFeature provides a mock function with given fields: group, id
func (_m *Repository) RemoveFeature(group string, id string) error {
	ret := _m.Called(group, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(group, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetFeature provides a mock function with given fields: group, id, geojson
func (_m *Repository) SetFeature(group string, id string, geojson string) (*model.Feature, error) {
	ret := _m.Called(group, id, geojson)

	var r0 *model.Feature
	if rf, ok := ret.Get(0).(func(string, string, string) *model.Feature); ok {
		r0 = rf(group, id, geojson)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Feature)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(group, id, geojson)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetFeatureExtraData provides a mock function with given fields: group, id, j
func (_m *Repository) SetFeatureExtraData(group string, id string, j string) error {
	ret := _m.Called(group, id, j)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(group, id, j)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
