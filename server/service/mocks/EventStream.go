// Code generated by mockery v1.0.0
package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import repository "github.com/perenecabuto/CatchCatch/server/service/repository"

// EventStream is an autogenerated mock type for the EventStream type
type EventStream struct {
	mock.Mock
}

// StreamIntersects provides a mock function with given fields: ctx, intersectKey, onKey, onKeyID, callback
func (_m *EventStream) StreamIntersects(ctx context.Context, intersectKey string, onKey string, onKeyID string, callback repository.DetectionHandler) error {
	ret := _m.Called(ctx, intersectKey, onKey, onKeyID, callback)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, repository.DetectionHandler) error); ok {
		r0 = rf(ctx, intersectKey, onKey, onKeyID, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StreamNearByEvents provides a mock function with given fields: ctx, nearByKey, roamKey, roamID, meters, callback
func (_m *EventStream) StreamNearByEvents(ctx context.Context, nearByKey string, roamKey string, roamID string, meters int, callback repository.DetectionHandler) error {
	ret := _m.Called(ctx, nearByKey, roamKey, roamID, meters, callback)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, repository.DetectionHandler) error); ok {
		r0 = rf(ctx, nearByKey, roamKey, roamID, meters, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
