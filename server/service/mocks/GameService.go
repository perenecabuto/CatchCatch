// Code generated by mockery v1.0.0
package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import model "github.com/perenecabuto/CatchCatch/server/model"
import service "github.com/perenecabuto/CatchCatch/server/service"

// GameService is an autogenerated mock type for the GameService type
type GameService struct {
	mock.Mock
}

// Create provides a mock function with given fields: gameID, coordinates
func (_m *GameService) Create(gameID string, coordinates string) (*service.GameWithCoords, error) {
	ret := _m.Called(gameID, coordinates)

	var r0 *service.GameWithCoords
	if rf, ok := ret.Get(0).(func(string, string) *service.GameWithCoords); ok {
		r0 = rf(gameID, coordinates)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.GameWithCoords)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(gameID, coordinates)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GameByID provides a mock function with given fields: gameID
func (_m *GameService) GameByID(gameID string) (*service.GameWithCoords, error) {
	ret := _m.Called(gameID)

	var r0 *service.GameWithCoords
	if rf, ok := ret.Get(0).(func(string) *service.GameWithCoords); ok {
		r0 = rf(gameID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.GameWithCoords)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GamesAround provides a mock function with given fields: p
func (_m *GameService) GamesAround(p model.Player) ([]service.GameWithCoords, error) {
	ret := _m.Called(p)

	var r0 []service.GameWithCoords
	if rf, ok := ret.Get(0).(func(model.Player) []service.GameWithCoords); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.GameWithCoords)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Player) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ObserveGamePlayers provides a mock function with given fields: ctx, gameID, callback
func (_m *GameService) ObserveGamePlayers(ctx context.Context, gameID string, callback func(model.Player, bool) error) error {
	ret := _m.Called(ctx, gameID, callback)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, func(model.Player, bool) error) error); ok {
		r0 = rf(ctx, gameID, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Remove provides a mock function with given fields: gameID
func (_m *GameService) Remove(gameID string) error {
	ret := _m.Called(gameID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(gameID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: g
func (_m *GameService) Update(g *service.GameWithCoords) error {
	ret := _m.Called(g)

	var r0 error
	if rf, ok := ret.Get(0).(func(*service.GameWithCoords) error); ok {
		r0 = rf(g)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
