// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/message.proto

package protobuf

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import encoding_binary "encoding/binary"

import io "io"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Simple struct {
	EventName string `protobuf:"bytes,1,req,name=event_name,json=eventName" json:"event_name"`
	Id        string `protobuf:"bytes,2,opt,name=id" json:"id"`
}

func (m *Simple) Reset()      { *m = Simple{} }
func (*Simple) ProtoMessage() {}
func (*Simple) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_a0a5549e06cfff7f, []int{0}
}
func (m *Simple) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Simple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Simple.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Simple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Simple.Merge(dst, src)
}
func (m *Simple) XXX_Size() int {
	return m.Size()
}
func (m *Simple) XXX_DiscardUnknown() {
	xxx_messageInfo_Simple.DiscardUnknown(m)
}

var xxx_messageInfo_Simple proto.InternalMessageInfo

func (m *Simple) GetEventName() string {
	if m != nil {
		return m.EventName
	}
	return ""
}

func (m *Simple) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Info struct {
	EventName string `protobuf:"bytes,1,req,name=event_name,json=eventName" json:"event_name"`
	Message   string `protobuf:"bytes,2,req,name=message" json:"message"`
	Id        string `protobuf:"bytes,3,opt,name=id" json:"id"`
}

func (m *Info) Reset()      { *m = Info{} }
func (*Info) ProtoMessage() {}
func (*Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_a0a5549e06cfff7f, []int{1}
}
func (m *Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Info.Merge(dst, src)
}
func (m *Info) XXX_Size() int {
	return m.Size()
}
func (m *Info) XXX_DiscardUnknown() {
	xxx_messageInfo_Info.DiscardUnknown(m)
}

var xxx_messageInfo_Info proto.InternalMessageInfo

func (m *Info) GetEventName() string {
	if m != nil {
		return m.EventName
	}
	return ""
}

func (m *Info) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Info) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Feature struct {
	EventName string `protobuf:"bytes,1,req,name=event_name,json=eventName" json:"event_name"`
	Group     string `protobuf:"bytes,2,req,name=group" json:"group"`
	Id        string `protobuf:"bytes,3,opt,name=id" json:"id"`
	Coords    string `protobuf:"bytes,4,opt,name=coords" json:"coords"`
}

func (m *Feature) Reset()      { *m = Feature{} }
func (*Feature) ProtoMessage() {}
func (*Feature) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_a0a5549e06cfff7f, []int{2}
}
func (m *Feature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Feature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Feature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Feature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feature.Merge(dst, src)
}
func (m *Feature) XXX_Size() int {
	return m.Size()
}
func (m *Feature) XXX_DiscardUnknown() {
	xxx_messageInfo_Feature.DiscardUnknown(m)
}

var xxx_messageInfo_Feature proto.InternalMessageInfo

func (m *Feature) GetEventName() string {
	if m != nil {
		return m.EventName
	}
	return ""
}

func (m *Feature) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *Feature) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Feature) GetCoords() string {
	if m != nil {
		return m.Coords
	}
	return ""
}

type Player struct {
	EventName string  `protobuf:"bytes,1,req,name=event_name,json=eventName" json:"event_name"`
	Id        string  `protobuf:"bytes,2,req,name=id" json:"id"`
	Lon       float64 `protobuf:"fixed64,3,req,name=lon" json:"lon"`
	Lat       float64 `protobuf:"fixed64,4,req,name=lat" json:"lat"`
}

func (m *Player) Reset()      { *m = Player{} }
func (*Player) ProtoMessage() {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_a0a5549e06cfff7f, []int{3}
}
func (m *Player) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(dst, src)
}
func (m *Player) XXX_Size() int {
	return m.Size()
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetEventName() string {
	if m != nil {
		return m.EventName
	}
	return ""
}

func (m *Player) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Player) GetLon() float64 {
	if m != nil {
		return m.Lon
	}
	return 0
}

func (m *Player) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

type GameInfo struct {
	EventName string `protobuf:"bytes,1,req,name=event_name,json=eventName" json:"event_name"`
	Id        string `protobuf:"bytes,2,req,name=id" json:"id"`
	Game      string `protobuf:"bytes,3,req,name=game" json:"game"`
	Role      string `protobuf:"bytes,4,req,name=role" json:"role"`
}

func (m *GameInfo) Reset()      { *m = GameInfo{} }
func (*GameInfo) ProtoMessage() {}
func (*GameInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_a0a5549e06cfff7f, []int{4}
}
func (m *GameInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GameInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameInfo.Merge(dst, src)
}
func (m *GameInfo) XXX_Size() int {
	return m.Size()
}
func (m *GameInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GameInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GameInfo proto.InternalMessageInfo

func (m *GameInfo) GetEventName() string {
	if m != nil {
		return m.EventName
	}
	return ""
}

func (m *GameInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GameInfo) GetGame() string {
	if m != nil {
		return m.Game
	}
	return ""
}

func (m *GameInfo) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

type GameRank struct {
	EventName   string        `protobuf:"bytes,1,req,name=event_name,json=eventName" json:"event_name"`
	Id          string        `protobuf:"bytes,2,req,name=id" json:"id"`
	Game        string        `protobuf:"bytes,3,req,name=game" json:"game"`
	PlayersRank []*PlayerRank `protobuf:"bytes,4,rep,name=players_rank,json=playersRank" json:"players_rank,omitempty"`
}

func (m *GameRank) Reset()      { *m = GameRank{} }
func (*GameRank) ProtoMessage() {}
func (*GameRank) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_a0a5549e06cfff7f, []int{5}
}
func (m *GameRank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameRank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameRank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GameRank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameRank.Merge(dst, src)
}
func (m *GameRank) XXX_Size() int {
	return m.Size()
}
func (m *GameRank) XXX_DiscardUnknown() {
	xxx_messageInfo_GameRank.DiscardUnknown(m)
}

var xxx_messageInfo_GameRank proto.InternalMessageInfo

func (m *GameRank) GetEventName() string {
	if m != nil {
		return m.EventName
	}
	return ""
}

func (m *GameRank) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GameRank) GetGame() string {
	if m != nil {
		return m.Game
	}
	return ""
}

func (m *GameRank) GetPlayersRank() []*PlayerRank {
	if m != nil {
		return m.PlayersRank
	}
	return nil
}

type PlayerRank struct {
	Player string `protobuf:"bytes,1,req,name=player" json:"player"`
	Points int32  `protobuf:"varint,2,req,name=points" json:"points"`
}

func (m *PlayerRank) Reset()      { *m = PlayerRank{} }
func (*PlayerRank) ProtoMessage() {}
func (*PlayerRank) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_a0a5549e06cfff7f, []int{6}
}
func (m *PlayerRank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerRank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerRank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PlayerRank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerRank.Merge(dst, src)
}
func (m *PlayerRank) XXX_Size() int {
	return m.Size()
}
func (m *PlayerRank) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerRank.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerRank proto.InternalMessageInfo

func (m *PlayerRank) GetPlayer() string {
	if m != nil {
		return m.Player
	}
	return ""
}

func (m *PlayerRank) GetPoints() int32 {
	if m != nil {
		return m.Points
	}
	return 0
}

type Distance struct {
	EventName string  `protobuf:"bytes,1,req,name=event_name,json=eventName" json:"event_name"`
	Id        string  `protobuf:"bytes,2,opt,name=id" json:"id"`
	Dist      float64 `protobuf:"fixed64,3,req,name=dist" json:"dist"`
}

func (m *Distance) Reset()      { *m = Distance{} }
func (*Distance) ProtoMessage() {}
func (*Distance) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_a0a5549e06cfff7f, []int{7}
}
func (m *Distance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Distance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Distance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Distance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Distance.Merge(dst, src)
}
func (m *Distance) XXX_Size() int {
	return m.Size()
}
func (m *Distance) XXX_DiscardUnknown() {
	xxx_messageInfo_Distance.DiscardUnknown(m)
}

var xxx_messageInfo_Distance proto.InternalMessageInfo

func (m *Distance) GetEventName() string {
	if m != nil {
		return m.EventName
	}
	return ""
}

func (m *Distance) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Distance) GetDist() float64 {
	if m != nil {
		return m.Dist
	}
	return 0
}

type Detection struct {
	EventName    string  `protobuf:"bytes,1,req,name=event_name,json=eventName" json:"event_name"`
	Id           string  `protobuf:"bytes,2,req,name=id" json:"id"`
	FeatId       string  `protobuf:"bytes,3,req,name=feat_id,json=featId" json:"feat_id"`
	Lat          float64 `protobuf:"fixed64,4,opt,name=lat" json:"lat"`
	Lon          float64 `protobuf:"fixed64,5,opt,name=lon" json:"lon"`
	NearByFeatId string  `protobuf:"bytes,6,opt,name=near_by_feat_id,json=nearByFeatId" json:"near_by_feat_id"`
	NearByMeters float64 `protobuf:"fixed64,7,opt,name=near_by_meters,json=nearByMeters" json:"near_by_meters"`
	Intersects   string  `protobuf:"bytes,8,opt,name=intersects" json:"intersects"`
}

func (m *Detection) Reset()      { *m = Detection{} }
func (*Detection) ProtoMessage() {}
func (*Detection) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_a0a5549e06cfff7f, []int{8}
}
func (m *Detection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Detection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Detection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Detection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Detection.Merge(dst, src)
}
func (m *Detection) XXX_Size() int {
	return m.Size()
}
func (m *Detection) XXX_DiscardUnknown() {
	xxx_messageInfo_Detection.DiscardUnknown(m)
}

var xxx_messageInfo_Detection proto.InternalMessageInfo

func (m *Detection) GetEventName() string {
	if m != nil {
		return m.EventName
	}
	return ""
}

func (m *Detection) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Detection) GetFeatId() string {
	if m != nil {
		return m.FeatId
	}
	return ""
}

func (m *Detection) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Detection) GetLon() float64 {
	if m != nil {
		return m.Lon
	}
	return 0
}

func (m *Detection) GetNearByFeatId() string {
	if m != nil {
		return m.NearByFeatId
	}
	return ""
}

func (m *Detection) GetNearByMeters() float64 {
	if m != nil {
		return m.NearByMeters
	}
	return 0
}

func (m *Detection) GetIntersects() string {
	if m != nil {
		return m.Intersects
	}
	return ""
}

func init() {
	proto.RegisterType((*Simple)(nil), "protobuf.Simple")
	proto.RegisterType((*Info)(nil), "protobuf.Info")
	proto.RegisterType((*Feature)(nil), "protobuf.Feature")
	proto.RegisterType((*Player)(nil), "protobuf.Player")
	proto.RegisterType((*GameInfo)(nil), "protobuf.GameInfo")
	proto.RegisterType((*GameRank)(nil), "protobuf.GameRank")
	proto.RegisterType((*PlayerRank)(nil), "protobuf.PlayerRank")
	proto.RegisterType((*Distance)(nil), "protobuf.Distance")
	proto.RegisterType((*Detection)(nil), "protobuf.Detection")
}
func (this *Simple) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Simple)
	if !ok {
		that2, ok := that.(Simple)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EventName != that1.EventName {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *Info) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Info)
	if !ok {
		that2, ok := that.(Info)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EventName != that1.EventName {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *Feature) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Feature)
	if !ok {
		that2, ok := that.(Feature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EventName != that1.EventName {
		return false
	}
	if this.Group != that1.Group {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Coords != that1.Coords {
		return false
	}
	return true
}
func (this *Player) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Player)
	if !ok {
		that2, ok := that.(Player)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EventName != that1.EventName {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Lon != that1.Lon {
		return false
	}
	if this.Lat != that1.Lat {
		return false
	}
	return true
}
func (this *GameInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameInfo)
	if !ok {
		that2, ok := that.(GameInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EventName != that1.EventName {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Game != that1.Game {
		return false
	}
	if this.Role != that1.Role {
		return false
	}
	return true
}
func (this *GameRank) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GameRank)
	if !ok {
		that2, ok := that.(GameRank)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EventName != that1.EventName {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Game != that1.Game {
		return false
	}
	if len(this.PlayersRank) != len(that1.PlayersRank) {
		return false
	}
	for i := range this.PlayersRank {
		if !this.PlayersRank[i].Equal(that1.PlayersRank[i]) {
			return false
		}
	}
	return true
}
func (this *PlayerRank) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlayerRank)
	if !ok {
		that2, ok := that.(PlayerRank)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Player != that1.Player {
		return false
	}
	if this.Points != that1.Points {
		return false
	}
	return true
}
func (this *Distance) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Distance)
	if !ok {
		that2, ok := that.(Distance)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EventName != that1.EventName {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Dist != that1.Dist {
		return false
	}
	return true
}
func (this *Detection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Detection)
	if !ok {
		that2, ok := that.(Detection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EventName != that1.EventName {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.FeatId != that1.FeatId {
		return false
	}
	if this.Lat != that1.Lat {
		return false
	}
	if this.Lon != that1.Lon {
		return false
	}
	if this.NearByFeatId != that1.NearByFeatId {
		return false
	}
	if this.NearByMeters != that1.NearByMeters {
		return false
	}
	if this.Intersects != that1.Intersects {
		return false
	}
	return true
}
func (this *Simple) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&protobuf.Simple{")
	s = append(s, "EventName: "+fmt.Sprintf("%#v", this.EventName)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Info) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&protobuf.Info{")
	s = append(s, "EventName: "+fmt.Sprintf("%#v", this.EventName)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Feature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&protobuf.Feature{")
	s = append(s, "EventName: "+fmt.Sprintf("%#v", this.EventName)+",\n")
	s = append(s, "Group: "+fmt.Sprintf("%#v", this.Group)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Coords: "+fmt.Sprintf("%#v", this.Coords)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Player) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&protobuf.Player{")
	s = append(s, "EventName: "+fmt.Sprintf("%#v", this.EventName)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Lon: "+fmt.Sprintf("%#v", this.Lon)+",\n")
	s = append(s, "Lat: "+fmt.Sprintf("%#v", this.Lat)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GameInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&protobuf.GameInfo{")
	s = append(s, "EventName: "+fmt.Sprintf("%#v", this.EventName)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Game: "+fmt.Sprintf("%#v", this.Game)+",\n")
	s = append(s, "Role: "+fmt.Sprintf("%#v", this.Role)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GameRank) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&protobuf.GameRank{")
	s = append(s, "EventName: "+fmt.Sprintf("%#v", this.EventName)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Game: "+fmt.Sprintf("%#v", this.Game)+",\n")
	if this.PlayersRank != nil {
		s = append(s, "PlayersRank: "+fmt.Sprintf("%#v", this.PlayersRank)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PlayerRank) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&protobuf.PlayerRank{")
	s = append(s, "Player: "+fmt.Sprintf("%#v", this.Player)+",\n")
	s = append(s, "Points: "+fmt.Sprintf("%#v", this.Points)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Distance) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&protobuf.Distance{")
	s = append(s, "EventName: "+fmt.Sprintf("%#v", this.EventName)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Dist: "+fmt.Sprintf("%#v", this.Dist)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Detection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&protobuf.Detection{")
	s = append(s, "EventName: "+fmt.Sprintf("%#v", this.EventName)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "FeatId: "+fmt.Sprintf("%#v", this.FeatId)+",\n")
	s = append(s, "Lat: "+fmt.Sprintf("%#v", this.Lat)+",\n")
	s = append(s, "Lon: "+fmt.Sprintf("%#v", this.Lon)+",\n")
	s = append(s, "NearByFeatId: "+fmt.Sprintf("%#v", this.NearByFeatId)+",\n")
	s = append(s, "NearByMeters: "+fmt.Sprintf("%#v", this.NearByMeters)+",\n")
	s = append(s, "Intersects: "+fmt.Sprintf("%#v", this.Intersects)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Simple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Simple) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.EventName)))
	i += copy(dAtA[i:], m.EventName)
	dAtA[i] = 0x12
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.Id)))
	i += copy(dAtA[i:], m.Id)
	return i, nil
}

func (m *Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Info) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.EventName)))
	i += copy(dAtA[i:], m.EventName)
	dAtA[i] = 0x12
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.Message)))
	i += copy(dAtA[i:], m.Message)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.Id)))
	i += copy(dAtA[i:], m.Id)
	return i, nil
}

func (m *Feature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Feature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.EventName)))
	i += copy(dAtA[i:], m.EventName)
	dAtA[i] = 0x12
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.Group)))
	i += copy(dAtA[i:], m.Group)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.Id)))
	i += copy(dAtA[i:], m.Id)
	dAtA[i] = 0x22
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.Coords)))
	i += copy(dAtA[i:], m.Coords)
	return i, nil
}

func (m *Player) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.EventName)))
	i += copy(dAtA[i:], m.EventName)
	dAtA[i] = 0x12
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.Id)))
	i += copy(dAtA[i:], m.Id)
	dAtA[i] = 0x19
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lon))))
	i += 8
	dAtA[i] = 0x21
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
	i += 8
	return i, nil
}

func (m *GameInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.EventName)))
	i += copy(dAtA[i:], m.EventName)
	dAtA[i] = 0x12
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.Id)))
	i += copy(dAtA[i:], m.Id)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.Game)))
	i += copy(dAtA[i:], m.Game)
	dAtA[i] = 0x22
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.Role)))
	i += copy(dAtA[i:], m.Role)
	return i, nil
}

func (m *GameRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.EventName)))
	i += copy(dAtA[i:], m.EventName)
	dAtA[i] = 0x12
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.Id)))
	i += copy(dAtA[i:], m.Id)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.Game)))
	i += copy(dAtA[i:], m.Game)
	if len(m.PlayersRank) > 0 {
		for _, msg := range m.PlayersRank {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMessage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PlayerRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerRank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.Player)))
	i += copy(dAtA[i:], m.Player)
	dAtA[i] = 0x10
	i++
	i = encodeVarintMessage(dAtA, i, uint64(m.Points))
	return i, nil
}

func (m *Distance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Distance) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.EventName)))
	i += copy(dAtA[i:], m.EventName)
	dAtA[i] = 0x12
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.Id)))
	i += copy(dAtA[i:], m.Id)
	dAtA[i] = 0x19
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Dist))))
	i += 8
	return i, nil
}

func (m *Detection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Detection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.EventName)))
	i += copy(dAtA[i:], m.EventName)
	dAtA[i] = 0x12
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.Id)))
	i += copy(dAtA[i:], m.Id)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.FeatId)))
	i += copy(dAtA[i:], m.FeatId)
	dAtA[i] = 0x21
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
	i += 8
	dAtA[i] = 0x29
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lon))))
	i += 8
	dAtA[i] = 0x32
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.NearByFeatId)))
	i += copy(dAtA[i:], m.NearByFeatId)
	dAtA[i] = 0x39
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.NearByMeters))))
	i += 8
	dAtA[i] = 0x42
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.Intersects)))
	i += copy(dAtA[i:], m.Intersects)
	return i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Simple) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventName)
	n += 1 + l + sovMessage(uint64(l))
	l = len(m.Id)
	n += 1 + l + sovMessage(uint64(l))
	return n
}

func (m *Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventName)
	n += 1 + l + sovMessage(uint64(l))
	l = len(m.Message)
	n += 1 + l + sovMessage(uint64(l))
	l = len(m.Id)
	n += 1 + l + sovMessage(uint64(l))
	return n
}

func (m *Feature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventName)
	n += 1 + l + sovMessage(uint64(l))
	l = len(m.Group)
	n += 1 + l + sovMessage(uint64(l))
	l = len(m.Id)
	n += 1 + l + sovMessage(uint64(l))
	l = len(m.Coords)
	n += 1 + l + sovMessage(uint64(l))
	return n
}

func (m *Player) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventName)
	n += 1 + l + sovMessage(uint64(l))
	l = len(m.Id)
	n += 1 + l + sovMessage(uint64(l))
	n += 9
	n += 9
	return n
}

func (m *GameInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventName)
	n += 1 + l + sovMessage(uint64(l))
	l = len(m.Id)
	n += 1 + l + sovMessage(uint64(l))
	l = len(m.Game)
	n += 1 + l + sovMessage(uint64(l))
	l = len(m.Role)
	n += 1 + l + sovMessage(uint64(l))
	return n
}

func (m *GameRank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventName)
	n += 1 + l + sovMessage(uint64(l))
	l = len(m.Id)
	n += 1 + l + sovMessage(uint64(l))
	l = len(m.Game)
	n += 1 + l + sovMessage(uint64(l))
	if len(m.PlayersRank) > 0 {
		for _, e := range m.PlayersRank {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func (m *PlayerRank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Player)
	n += 1 + l + sovMessage(uint64(l))
	n += 1 + sovMessage(uint64(m.Points))
	return n
}

func (m *Distance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventName)
	n += 1 + l + sovMessage(uint64(l))
	l = len(m.Id)
	n += 1 + l + sovMessage(uint64(l))
	n += 9
	return n
}

func (m *Detection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventName)
	n += 1 + l + sovMessage(uint64(l))
	l = len(m.Id)
	n += 1 + l + sovMessage(uint64(l))
	l = len(m.FeatId)
	n += 1 + l + sovMessage(uint64(l))
	n += 9
	n += 9
	l = len(m.NearByFeatId)
	n += 1 + l + sovMessage(uint64(l))
	n += 9
	l = len(m.Intersects)
	n += 1 + l + sovMessage(uint64(l))
	return n
}

func sovMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Simple) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Simple{`,
		`EventName:` + fmt.Sprintf("%v", this.EventName) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Info) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Info{`,
		`EventName:` + fmt.Sprintf("%v", this.EventName) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feature{`,
		`EventName:` + fmt.Sprintf("%v", this.EventName) + `,`,
		`Group:` + fmt.Sprintf("%v", this.Group) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Coords:` + fmt.Sprintf("%v", this.Coords) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Player) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Player{`,
		`EventName:` + fmt.Sprintf("%v", this.EventName) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Lon:` + fmt.Sprintf("%v", this.Lon) + `,`,
		`Lat:` + fmt.Sprintf("%v", this.Lat) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameInfo{`,
		`EventName:` + fmt.Sprintf("%v", this.EventName) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Game:` + fmt.Sprintf("%v", this.Game) + `,`,
		`Role:` + fmt.Sprintf("%v", this.Role) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GameRank) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GameRank{`,
		`EventName:` + fmt.Sprintf("%v", this.EventName) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Game:` + fmt.Sprintf("%v", this.Game) + `,`,
		`PlayersRank:` + strings.Replace(fmt.Sprintf("%v", this.PlayersRank), "PlayerRank", "PlayerRank", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlayerRank) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PlayerRank{`,
		`Player:` + fmt.Sprintf("%v", this.Player) + `,`,
		`Points:` + fmt.Sprintf("%v", this.Points) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Distance) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Distance{`,
		`EventName:` + fmt.Sprintf("%v", this.EventName) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Dist:` + fmt.Sprintf("%v", this.Dist) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Detection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Detection{`,
		`EventName:` + fmt.Sprintf("%v", this.EventName) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`FeatId:` + fmt.Sprintf("%v", this.FeatId) + `,`,
		`Lat:` + fmt.Sprintf("%v", this.Lat) + `,`,
		`Lon:` + fmt.Sprintf("%v", this.Lon) + `,`,
		`NearByFeatId:` + fmt.Sprintf("%v", this.NearByFeatId) + `,`,
		`NearByMeters:` + fmt.Sprintf("%v", this.NearByMeters) + `,`,
		`Intersects:` + fmt.Sprintf("%v", this.Intersects) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Simple) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Simple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Simple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("event_name")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Info) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("event_name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("message")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Feature) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Feature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Feature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coords = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("event_name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("group")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lon", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lon = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("event_name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lon")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("lat")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Game", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Game = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("event_name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("game")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("role")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRank) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Game", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Game = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayersRank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayersRank = append(m.PlayersRank, &PlayerRank{})
			if err := m.PlayersRank[len(m.PlayersRank)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("event_name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("game")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerRank) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Player = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			m.Points = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Points |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("player")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("points")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Distance) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Distance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Distance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dist", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Dist = float64(math.Float64frombits(v))
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("event_name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("dist")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Detection) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Detection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Detection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lon", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lon = float64(math.Float64frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NearByFeatId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NearByFeatId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NearByMeters", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.NearByMeters = float64(math.Float64frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intersects", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Intersects = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("event_name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("feat_id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("protobuf/message.proto", fileDescriptor_message_a0a5549e06cfff7f) }

var fileDescriptor_message_a0a5549e06cfff7f = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xcf, 0x6e, 0xd3, 0x4c,
	0x14, 0xc5, 0x3d, 0xb6, 0xf3, 0xef, 0xb6, 0xfa, 0x3e, 0xc9, 0xaa, 0xaa, 0x11, 0x82, 0x21, 0x32,
	0x2c, 0x22, 0x90, 0x82, 0x84, 0x90, 0xd8, 0x87, 0xaa, 0xd0, 0x05, 0x08, 0x85, 0x07, 0xb0, 0xa6,
	0xf1, 0x4d, 0x64, 0x35, 0x9e, 0x89, 0x3c, 0x13, 0xa4, 0x6c, 0x10, 0x8f, 0xc0, 0x82, 0x05, 0x8f,
	0xc0, 0xa3, 0x74, 0x99, 0x65, 0x57, 0x88, 0x38, 0x1b, 0x96, 0x7d, 0x04, 0x34, 0x63, 0x3b, 0xb5,
	0x51, 0x17, 0x41, 0x15, 0xbb, 0xe4, 0x77, 0xae, 0xef, 0xb9, 0xf7, 0xce, 0x81, 0xe3, 0x45, 0x26,
	0xb5, 0x3c, 0x5f, 0x4e, 0x9f, 0xa5, 0xa8, 0x14, 0x9f, 0xe1, 0xd0, 0x82, 0xa0, 0x5b, 0xf1, 0xf0,
	0x15, 0xb4, 0x3f, 0x24, 0xe9, 0x62, 0x8e, 0xc1, 0x23, 0x00, 0xfc, 0x88, 0x42, 0x47, 0x82, 0xa7,
	0x48, 0x49, 0xdf, 0x1d, 0xf4, 0x46, 0xfe, 0xe5, 0x8f, 0x87, 0xce, 0xb8, 0x67, 0xf9, 0x3b, 0x9e,
	0x62, 0x70, 0x04, 0x6e, 0x12, 0x53, 0xb7, 0x4f, 0x76, 0xa2, 0x9b, 0xc4, 0x21, 0x07, 0xff, 0x4c,
	0x4c, 0xe5, 0x7e, 0x2d, 0x18, 0x74, 0xca, 0x61, 0xa8, 0x5b, 0xab, 0xa8, 0x60, 0x69, 0xe1, 0xfd,
	0x61, 0xf1, 0x09, 0x3a, 0xa7, 0xc8, 0xf5, 0x32, 0xdb, 0x73, 0xd0, 0x7b, 0xd0, 0x9a, 0x65, 0x72,
	0xb9, 0x68, 0x78, 0x14, 0xe8, 0x76, 0x87, 0xe0, 0x3e, 0xb4, 0x27, 0x52, 0x66, 0xb1, 0xa2, 0x7e,
	0x4d, 0x29, 0x59, 0xa8, 0xa0, 0xfd, 0x7e, 0xce, 0x57, 0x98, 0xfd, 0xdd, 0x9d, 0xdc, 0x86, 0xc5,
	0x31, 0x78, 0x73, 0x29, 0xa8, 0xd7, 0x77, 0x07, 0xa4, 0xc4, 0x06, 0x58, 0xce, 0x35, 0xf5, 0x1b,
	0x9c, 0xeb, 0x70, 0x05, 0xdd, 0xd7, 0x3c, 0xc5, 0xfd, 0x6f, 0x7b, 0xbb, 0x2d, 0x05, 0x7f, 0x66,
	0x3e, 0xf2, 0x6a, 0xdc, 0x12, 0xa3, 0x64, 0x72, 0x8e, 0xd6, 0x79, 0xa7, 0x18, 0x12, 0x7e, 0x23,
	0x85, 0xf7, 0x98, 0x8b, 0x8b, 0x7f, 0xe3, 0xfd, 0x12, 0x0e, 0x17, 0xf6, 0xa2, 0x2a, 0xca, 0xb8,
	0xb8, 0xa0, 0x7e, 0xdf, 0x1b, 0x1c, 0x3c, 0x3f, 0x1a, 0x56, 0xd1, 0x1c, 0x16, 0xf7, 0x36, 0x03,
	0x8c, 0x0f, 0xca, 0x4a, 0xf3, 0x27, 0x7c, 0x03, 0x70, 0x23, 0x99, 0x67, 0x2b, 0xc4, 0xc6, 0x5c,
	0x25, 0xb3, 0xaa, 0x4c, 0x84, 0x56, 0x76, 0xb0, 0xd6, 0x4e, 0xb5, 0x2c, 0x8c, 0xa0, 0x7b, 0x92,
	0x28, 0xcd, 0xc5, 0xe4, 0x2e, 0xf1, 0x37, 0x3b, 0xc6, 0x89, 0xd2, 0x8d, 0x77, 0xb5, 0x24, 0xfc,
	0xea, 0x42, 0xef, 0x04, 0x35, 0x4e, 0x74, 0x22, 0xc5, 0x5d, 0xce, 0xf8, 0x00, 0x3a, 0x53, 0xe4,
	0x3a, 0xb2, 0xb9, 0xad, 0xad, 0x69, 0xe0, 0x59, 0x7c, 0x13, 0x20, 0xd2, 0x08, 0x50, 0x15, 0xb8,
	0x56, 0x83, 0x4b, 0x11, 0x3c, 0x85, 0xff, 0x05, 0xf2, 0x2c, 0x3a, 0x5f, 0x45, 0x55, 0xdb, 0x76,
	0x6d, 0xa9, 0x43, 0x23, 0x8e, 0x56, 0xa7, 0x45, 0xf3, 0x27, 0xf0, 0x5f, 0x55, 0x9c, 0xa2, 0xc6,
	0x4c, 0xd1, 0x4e, 0xad, 0x5f, 0x59, 0xfb, 0xd6, 0x2a, 0xc1, 0x63, 0x80, 0x44, 0x98, 0x5f, 0x38,
	0xd1, 0x8a, 0x76, 0x6b, 0x3d, 0x6b, 0x7c, 0xf4, 0x62, 0xbd, 0x61, 0xce, 0xd5, 0x86, 0x39, 0xd7,
	0x1b, 0x46, 0x3e, 0xe7, 0x8c, 0x7c, 0xcf, 0x19, 0xb9, 0xcc, 0x19, 0x59, 0xe7, 0x8c, 0xfc, 0xcc,
	0x19, 0xf9, 0x95, 0x33, 0xe7, 0x3a, 0x67, 0xe4, 0xcb, 0x96, 0x39, 0xeb, 0x2d, 0x73, 0xae, 0xb6,
	0xcc, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x4d, 0xce, 0x05, 0xcd, 0x04, 0x00, 0x00,
}
